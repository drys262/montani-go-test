AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for ECS with ECR repository and VPC.

Parameters:
  ECSClusterName:
    Description: Name of the ECS Cluster
    Type: String
    Default: gotestv2-ecscluster

  ECSServiceName:
    Description: Name of the ECS Service
    Type: String
    Default: gotestv2-ecservice

  ContainerName:
    Description: Name of the Container
    Type: String
    Default: gotestv2-container

  ECRRepositoryName:
    Description: ECR repo name
    Type: String
    Default: gotestv2-ecr
  
  Environment:
    Description: Environment
    Type: String
    Default: dev

  FeatureBranch:
    Description: Feature branch name
    Type: String
    Default: dev

  BranchSha:
    Description: Feature branch name
    Type: String
    Default: dev

Conditions:
  UseFeatureBranchName: 
    !Not [ !Equals [ !Ref FeatureBranch, "" ] ]
  UseBranchSha: 
    !Not [!Equals [!Ref BranchSha, ""]]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: GoTestV2VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: GoTestV2InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access on port 8080
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ServiceSecurityGroup 
  
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 
        - "${Name}-gotestv2-nlb"
        - Name: !If 
          - UseFeatureBranchName
          - !Ref FeatureBranch
          - !Ref Environment
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: network

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 
        - "${Name}-gotestv2-tg"
        - Name: !If 
          - UseFeatureBranchName
          - !Ref FeatureBranch
          - !Ref Environment
      Port: 8080
      Protocol: TCP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: "8080"
      HealthCheckPath: "/health"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP
    DependsOn: 
      - NetworkLoadBalancer
      - TargetGroup

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: AmazonECSTaskExecutionPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken" 
                  - "logs:DescribeLogStreams"
                  - "logs:DescribeLogGroups"
                  - "logs:CreateLogGroup"
                Resource: "*"
  
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ContainerName
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSRole.Arn
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: 
            Fn::If:
              - UseBranchSha
              - !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:${BranchSha}"
              - !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:latest"
          Essential: true
          PortMappings:
            - Name: gotestv2-container-8080-tcp
              ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
              AppProtocol: http
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub
                - /ecs/${Name}-gotestv2-container
                - Name: !If
                    - UseFeatureBranchName
                    - !Ref FeatureBranch
                    - !Ref Environment
              awslogs-create-group: "true"
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
            SecretOptions: []
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub 
        - "${Name}-gotestv2-ecservice"
        - Name: !If 
          - UseFeatureBranchName
          - !Ref FeatureBranch
          - !Ref Environment
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
    DependsOn: LoadBalancerListener

Outputs:
  LoadBalancerDNSName:
    Description: The DNS name of the Network Load Balancer
    Value: !GetAtt NetworkLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerDNSName"
  TaskDefinitionStaticIP:
    Condition: UseFeatureBranchName
    Value: !GetAtt ECSTaskDefinition.NetworkInterfaces
    Export:
      Name: TaskDefinitionStaticIP